def problem(b):
    '''
        Return the sum of the perimeters of all almost equilateral triangles
        with integral side lengths and integral area, and whose perimeter
        do not exceed b. An almost equilateral triangle is a triangle
        for which two sides are equal while the third differs by no more than one unit.

        Let x be the length of the two sides that are equal. Then the perimeter
        is at most 3x +- 1, i.e. x <= (b -+ 1)/3
        The area of the almost equilateral triangle is given by
            sqrt(x^2 - (x +- 1)^2 / 4) * (x +-1) / 2.
        Thus in particular we have that x is odd, say x = 2 * n - 1
        Now take the + variant first. The area in n is then given as
            n * sqrt((n-1)(3n-1))
        hence our triangle is valid if and only if (n-1)(3n-1) = m^2 for some m.
        Equivalently
            n = 1/3 (sqrt(3m^2 + 1) + 2)
        i.e. 3m^2 + 1 = r^2. But this is a Pell equation (see p66) with D = 3. The unit group
        of Q(sqrt(3)) is generated by 2 + sqrt(3) hence general solution is given as

            m = +-((2 + sqrt(3))^k - (2 - sqrt(3))^k) / 2sqrt(3)
            r = +-((2 + sqrt(3))^k + (2 + sqrt(3))^k) / 2

        for k in Z. We are only interested in the solution for r and in fact it is easy to deduce
        the recurrence relation
            
            r_k = 4r_{k-1} - r_{k-2}

        for r_0 = 1, r_1 = 2. Now, n = 1/3(r_k + 2) is an integer iff k is even and we thus
        have a infinitely many solutions given by x_k = (2 * r_{2*k} + 1)/3 for k. We can now unravel
        the recurrence relation of r_k:

            x_k = (8r_{2k-1} - 2_{2k-2} + 1) / 3
                = (30r_{2k-2} - 8r_{2k-3} + 1) / 3
                = 15x_{k-1} - (8r_{2k-3} + 14) / 3
                = 15x_{k-1} - (30r_{2k-4} - 2r_{2k-6} + 15 - 1) / 3
                = 15x_{k-1} - 15x_{k-2} + (2r_{2k-6} + 1) / 3
                = 15x_{k-1} - 15x_{k-2} + x_{k-3}

        with x_0 = 1, x_1 = 5, x_2 = 65.

        The minus variant is too similar to repeat: write x = 2n + 1, then area is given

            n * sqrt((n+1)(3n+1))

        which is an integer iff (n + 1)(3n + 1) = m^2, or equivalently, n = (sqrt(3m^2+1) - 2)/3.
        Can repeat the above procedure to retrieve the same recurrence relation but for odd k and with
        x_0 = 1, x_2 = 17, x_3 = 241.
    '''
    def recurrence_up_to_bound(vals, bound):
        new_val = 15 * vals[-1] - 15 * vals[-2] + vals[-3]
        while new_val < bound:
            vals.append(new_val)
            new_val = 15 * vals[-1] - 15 * vals[-2] + vals[-3]

    if b <= 17:
        return 16
    if b <= 65:
        return 61
    if b <= 241:
        return 61 + 65 + 65 + 66
    minus = [1, 17, 241]
    plus = [1, 5, 65]
    recurrence_up_to_bound(plus, (b - 1) / 3)
    recurrence_up_to_bound(minus, (b + 1) / 3)
    # 1 doesnt count so have to subtract 6
    return sum(3 * x for x in minus + plus) - len(minus) + len(plus) - 6


if __name__ == "__main__":
    print(problem(242))
