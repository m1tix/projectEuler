from math import sqrt, floor, log
from itertools import product


def problem029(n):
    '''
        Returns the number of distinct terms generated by a^b for 2 <= a <= n
        and 2 <= b <= n.

        Everything about this is absolutely awful, but at least it works?
        Should probably look for a close formula of f(j, n) tbh. Note that the
        euler problem can be bruteforced, but the hackerrank cannot.
    '''
    def f(j, m):
        # Erdos multiplication table? (tfw open problem (if j = m))
        # For j = 1: n-1
        # For j = 2: n - 1 + ceil(n/2)
        # For j = 3: n - 1 + ceil(n/2) + ceil(n/3) - ceil(n/6)
        return {i * k for i, k in product(range(1, j + 1), range(2, m + 1))}

    squareTerms = 0
    accounted = [0] * (n + 1)
    for a in range(2, floor(sqrt(n)) + 1):
        if not accounted[a]:
            j = floor(log(n, a))
            for k in range(1, j + 1):
                accounted[a**k] = 1
            squareTerms += len(f(j, n))
    return (n - 1 - sum(accounted)) * (n - 1) + squareTerms


if __name__ == "__main__":
    print(problem029(100))
